'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');
var path = require('path');

//rename output webpack plugin

var renameOutputPlugin = function () {
    function renameOutputPlugin(map) {
        _classCallCheck(this, renameOutputPlugin);

        this.map = map;
    }

    _createClass(renameOutputPlugin, [{
        key: 'getModuleDirectory',
        value: function getModuleDirectory(modulePath, moduleName) {
            if (modulePath.indexOf('node_modules') < 0) {
                return false;
            }

            return modulePath.slice(0, modulePath.indexOf(moduleName)) + moduleName;
        }
    }, {
        key: 'isFileExist',
        value: function isFileExist(filepath) {
            return filepath ? fs.existsSync(path.resolve(filepath)) : false;
        }
    }, {
        key: 'readFile',
        value: function readFile(filepath) {
            return filepath ? fs.readFileSync(filepath, 'utf8') : false;
        }
    }, {
        key: 'parseJson',
        value: function parseJson(content) {
            var parsedContent = void 0;

            try {
                parsedContent = JSON.parse(content);
            } catch (e) {
                parsedContent = false;
            }

            return parsedContent;
        }
    }, {
        key: 'getChunkModules',
        value: function getChunkModules(chunk) {
            var _this = this;

            var modules = [];

            chunk.forEachModule(function (module) {
                var modulePath = _this.getModuleDirectory(module.context, module.rawRequest);

                if (modulePath) {
                    modulePath = modulePath + '/package.json';
                } else {
                    return;
                }

                if (_this.isFileExist(modulePath)) {
                    var json = _this.parseJson(_this.readFile(modulePath));

                    if (json) {
                        modules.push({
                            'name': json.name,
                            'version': json.version,
                            'path': module.context
                        });
                    }
                }
            });

            return modules;
        }
    }, {
        key: 'apply',
        value: function apply(compiler) {
            var _this2 = this;

            compiler.plugin('this-compilation', function (compilation) {

                compilation.plugin(['optimize-chunks'], function (chunks) {

                    chunks.forEach(function (chunk) {

                        Object.keys(_this2.map).forEach(function (outputName) {

                            if (outputName === chunk.name) {

                                var newOutputName = _this2.map[outputName].replace(/\[.*?\]/g, function (match) {
                                    var version = match;

                                    if (match.indexOf('version') >= 0) {
                                        var modules = void 0,
                                            selectedModule = void 0;
                                        modules = _this2.getChunkModules(chunk);

                                        if (match.indexOf('@') >= 0) {
                                            var moduleName = match.substr(match.indexOf('@') + 1, match.length - 10);

                                            modules = modules.filter(function (module) {
                                                return module.name === moduleName;
                                            });
                                        }

                                        if (Array.isArray(modules) && modules.length) {
                                            selectedModule = modules[0];
                                        }

                                        if (selectedModule.version) {
                                            version = selectedModule.version;
                                        }
                                    }

                                    return version;
                                });
                                chunk.filenameTemplate = newOutputName;
                            }
                        });
                    });
                });
            });
        }
    }]);

    return renameOutputPlugin;
}();

module.exports = renameOutputPlugin;